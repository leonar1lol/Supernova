package tienda.supernova.servlets;

import tienda.supernova.db.DBConnection;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@WebServlet("/admin/users")
public class AdminUserServlet extends HttpServlet {

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String editId = request.getParameter("edit");
        Map<String, Object> editUser = null;
        List<Map<String, Object>> users = new ArrayList<>();

        String sqlList = "SELECT * FROM usuarios";
        try (Connection con = DBConnection.getConnection()) {
            try (PreparedStatement ps = con.prepareStatement(sqlList); ResultSet rs = ps.executeQuery()) {
                java.sql.ResultSetMetaData md = rs.getMetaData();
                int cols = md.getColumnCount();
                boolean hasRol = false, hasIsAdmin = false, hasCreated = false;
                for (int i = 1; i <= cols; i++) {
                    String col = md.getColumnLabel(i).toLowerCase();
                    if ("rol".equals(col)) hasRol = true;
                    if ("is_admin".equals(col) || "isadmin".equals(col)) hasIsAdmin = true;
                    if ("created_at".equals(col) || "created".equals(col)) hasCreated = true;
                }
                while (rs.next()) {
                    Map<String, Object> u = new HashMap<>();
                    // campos basicos
                    try { u.put("id", rs.getInt("id")); } catch (SQLException ex) {}
                    try { u.put("nombre", rs.getString("nombre")); } catch (SQLException ex) {}
                    try { u.put("apellidos", rs.getString("apellidos")); } catch (SQLException ex) {}
                    try { u.put("email", rs.getString("email")); } catch (SQLException ex) {}
                    try { u.put("fecha_nacimiento", rs.getString("fecha_nacimiento")); } catch (SQLException ex) {}
                    if (hasCreated) {
                        try { u.put("created_at", rs.getTimestamp("created_at")); } catch (SQLException ex) { u.put("created_at", null); }
                    }
                    if (hasRol) {
                        try { u.put("rol", rs.getString("rol")); } catch (SQLException ex) { u.put("rol", null); }
                    }
                    if (hasIsAdmin) {
                        try { u.put("is_admin", rs.getBoolean("is_admin")); } catch (SQLException ex) { u.put("is_admin", null); }
                    }
                    users.add(u);
                }
            }

            if (editId != null && !editId.isEmpty()) {
                String sql = "SELECT * FROM usuarios WHERE id = ?";
                try (PreparedStatement ps2 = con.prepareStatement(sql)) {
                    ps2.setInt(1, Integer.parseInt(editId));
                    try (ResultSet rs2 = ps2.executeQuery()) {
                        if (rs2.next()) {
                            editUser = new HashMap<>();
                            java.sql.ResultSetMetaData md2 = rs2.getMetaData();
                            int cols2 = md2.getColumnCount();
                            boolean hasRol2 = false, hasIsAdmin2 = false;
                            for (int i = 1; i <= cols2; i++) {
                                String col = md2.getColumnLabel(i).toLowerCase();
                                if ("rol".equals(col)) hasRol2 = true;
                                if ("is_admin".equals(col) || "isadmin".equals(col)) hasIsAdmin2 = true;
                            }
                            try { editUser.put("id", rs2.getInt("id")); } catch (SQLException ex) {}
                            try { editUser.put("nombre", rs2.getString("nombre")); } catch (SQLException ex) {}
                            try { editUser.put("apellidos", rs2.getString("apellidos")); } catch (SQLException ex) {}
                            try { editUser.put("email", rs2.getString("email")); } catch (SQLException ex) {}
                            try { editUser.put("fecha_nacimiento", rs2.getString("fecha_nacimiento")); } catch (SQLException ex) {}
                            if (hasRol2) { try { editUser.put("rol", rs2.getString("rol")); } catch (SQLException ex) { editUser.put("rol", null); } }
                            if (hasIsAdmin2) { try { editUser.put("is_admin", rs2.getBoolean("is_admin")); } catch (SQLException ex) { editUser.put("is_admin", null); } }
                        }
                    }
                }
            }

        } catch (SQLException e) {
            throw new ServletException(e);
        }

        request.setAttribute("users", users);
        request.setAttribute("editUser", editUser);
        request.getRequestDispatcher("/admin/users.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null) action = "create";

        try (Connection con = DBConnection.getConnection()) {
            if (action.equals("create") || action.equals("update")) {
                String nombre = request.getParameter("nombre");
                String apellidos = request.getParameter("apellidos");
                String email = request.getParameter("email");
                String password = request.getParameter("password");
                String fechaNacimiento = request.getParameter("fecha_nacimiento");
                String rol = request.getParameter("rol");
                String isAdminParam = request.getParameter("is_admin");

                // Detectar si la tabla usuarios tiene columnas 'rol' o 'is_admin'
                boolean hasRolCol = false;
                boolean hasIsAdminCol = false;
                try (PreparedStatement pmeta = con.prepareStatement("SELECT * FROM usuarios LIMIT 1")) {
                    try (ResultSet rmeta = pmeta.executeQuery()) {
                        java.sql.ResultSetMetaData md = rmeta.getMetaData();
                        for (int i = 1; i <= md.getColumnCount(); i++) {
                            String col = md.getColumnLabel(i).toLowerCase();
                            if ("rol".equals(col)) hasRolCol = true;
                            if ("is_admin".equals(col) || "isadmin".equals(col)) hasIsAdminCol = true;
                        }
                    } catch (SQLException ignore) {}
                } catch (SQLException ignore) {}

                // Validación: email único
                String checkSql = "SELECT COUNT(*) AS cnt FROM usuarios WHERE email = ?";
                try (PreparedStatement checkPs = con.prepareStatement(checkSql)) {
                    checkPs.setString(1, email);
                    try (ResultSet rs = checkPs.executeQuery()) {
                        if (rs.next()) {
                            int cnt = rs.getInt("cnt");
                            if (action.equals("create") && cnt > 0) {
                                // ya existe
                                response.sendRedirect(request.getContextPath() + "/admin/users?error=email_exists");
                                return;
                            }
                            if (action.equals("update") && cnt > 0) {
                                // verificar si el email pertenece al mismo id
                                String id = request.getParameter("id");
                                if (id != null) {
                                    try (PreparedStatement psId = con.prepareStatement("SELECT id FROM usuarios WHERE email = ?")) {
                                        psId.setString(1, email);
                                        try (ResultSet rs2 = psId.executeQuery()) {
                                            if (rs2.next()) {
                                                int foundId = rs2.getInt("id");
                                                if (foundId != Integer.parseInt(id)) {
                                                    response.sendRedirect(request.getContextPath() + "/admin/users?error=email_exists");
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                if (action.equals("create")) {
                    // Construir INSERT según columnas disponibles
                    String sql;
                    if (hasRolCol) {
                        sql = "INSERT INTO usuarios (nombre, apellidos, email, password, fecha_nacimiento, created_at, rol) VALUES (?, ?, ?, ?, ?, NOW(), ?)";
                        try (PreparedStatement ps = con.prepareStatement(sql)) {
                            ps.setString(1, nombre);
                            ps.setString(2, apellidos);
                            ps.setString(3, email);
                            ps.setString(4, password);
                            ps.setString(5, fechaNacimiento);
                            ps.setString(6, rol);
                            ps.executeUpdate();
                        }
                    } else if (hasIsAdminCol) {
                        sql = "INSERT INTO usuarios (nombre, apellidos, email, password, fecha_nacimiento, created_at, is_admin) VALUES (?, ?, ?, ?, ?, NOW(), ?)";
                        try (PreparedStatement ps = con.prepareStatement(sql)) {
                            ps.setString(1, nombre);
                            ps.setString(2, apellidos);
                            ps.setString(3, email);
                            ps.setString(4, password);
                            ps.setString(5, fechaNacimiento);
                            ps.setInt(6, (isAdminParam != null) ? Integer.parseInt(isAdminParam) : 0);
                            ps.executeUpdate();
                        }
                    } else {
                        sql = "INSERT INTO usuarios (nombre, apellidos, email, password, fecha_nacimiento, created_at) VALUES (?, ?, ?, ?, ?, NOW())";
                        try (PreparedStatement ps = con.prepareStatement(sql)) {
                            ps.setString(1, nombre);
                            ps.setString(2, apellidos);
                            ps.setString(3, email);
                            ps.setString(4, password);
                            ps.setString(5, fechaNacimiento);
                            ps.executeUpdate();
                        }
                    }
                } else {
                    String id = request.getParameter("id");
                    // Construir UPDATE dinámico
                    StringBuilder sb = new StringBuilder("UPDATE usuarios SET nombre = ?, apellidos = ?, email = ?, fecha_nacimiento = ?");
                    if (password != null && !password.isEmpty()) sb.append(", password = ?");
                    if (hasRolCol) sb.append(", rol = ?");
                    sb.append(" WHERE id = ?");
                    try (PreparedStatement ps = con.prepareStatement(sb.toString())) {
                        int idx = 1;
                        ps.setString(idx++, nombre);
                        ps.setString(idx++, apellidos);
                        ps.setString(idx++, email);
                        ps.setString(idx++, fechaNacimiento);
                        if (password != null && !password.isEmpty()) ps.setString(idx++, password);
                        if (hasRolCol) ps.setString(idx++, rol);
                        ps.setInt(idx++, Integer.parseInt(id));
                        ps.executeUpdate();
                    }
                    // Manejar is_admin si existe; si no existe column 'is_admin' pero existe 'rol' podemos actualizar rol según checkbox
                    if (isAdminParam != null) {
                        if (hasIsAdminCol) {
                            try (PreparedStatement ps2 = con.prepareStatement("UPDATE usuarios SET is_admin = ? WHERE id = ?")) {
                                ps2.setInt(1, Integer.parseInt(isAdminParam));
                                ps2.setInt(2, Integer.parseInt(id));
                                ps2.executeUpdate();
                            } catch (SQLException ignore) {}
                        } else if (hasRolCol) {
                            // mapear is_admin a rol
                            String nextRol = (Integer.parseInt(isAdminParam) == 1) ? "admin" : "user";
                            try (PreparedStatement ps3 = con.prepareStatement("UPDATE usuarios SET rol = ? WHERE id = ?")) {
                                ps3.setString(1, nextRol);
                                ps3.setInt(2, Integer.parseInt(id));
                                ps3.executeUpdate();
                            } catch (SQLException ignore) {}
                        }
                    }
                }

            } else if (action.equals("delete")) {
                String id = request.getParameter("id");
                String sql = "DELETE FROM usuarios WHERE id = ?";
                try (PreparedStatement ps = con.prepareStatement(sql)) {
                    ps.setInt(1, Integer.parseInt(id));
                    ps.executeUpdate();
                }
            } else if (action.equals("toggleAdmin")) {
                String id = request.getParameter("id");
                // Detectar si existe rol o is_admin
                boolean hasRol = false, hasIsAdmin = false;
                try (PreparedStatement pmeta = con.prepareStatement("SELECT * FROM usuarios LIMIT 1")) {
                    try (ResultSet rmeta = pmeta.executeQuery()) {
                        java.sql.ResultSetMetaData md = rmeta.getMetaData();
                        for (int i = 1; i <= md.getColumnCount(); i++) {
                            String col = md.getColumnLabel(i).toLowerCase();
                            if ("rol".equals(col)) hasRol = true;
                            if ("is_admin".equals(col) || "isadmin".equals(col)) hasIsAdmin = true;
                        }
                    } catch (SQLException ignore) {}
                } catch (SQLException ignore) {}

                try {
                    if (hasIsAdmin) {
                        try (PreparedStatement ps = con.prepareStatement("UPDATE usuarios SET is_admin = NOT is_admin WHERE id = ?")) {
                            ps.setInt(1, Integer.parseInt(id));
                            ps.executeUpdate();
                        }
                        // sincronizar rol si existe
                        if (hasRol) {
                            try (PreparedStatement ps2 = con.prepareStatement("SELECT is_admin FROM usuarios WHERE id = ?")) {
                                ps2.setInt(1, Integer.parseInt(id));
                                try (ResultSet rs = ps2.executeQuery()) {
                                    if (rs.next()) {
                                        boolean isAdmin = rs.getBoolean("is_admin");
                                        String roleVal = isAdmin ? "admin" : "user";
                                        try (PreparedStatement ps3 = con.prepareStatement("UPDATE usuarios SET rol = ? WHERE id = ?")) {
                                            ps3.setString(1, roleVal);
                                            ps3.setInt(2, Integer.parseInt(id));
                                            ps3.executeUpdate();
                                        }
                                    }
                                }
                            }
                        }
                    } else if (hasRol) {
                        try (PreparedStatement ps2 = con.prepareStatement("SELECT rol FROM usuarios WHERE id = ?")) {
                            ps2.setInt(1, Integer.parseInt(id));
                            try (ResultSet rs = ps2.executeQuery()) {
                                if (rs.next()) {
                                    String current = rs.getString("rol");
                                    String next = ("admin".equalsIgnoreCase(current)) ? "user" : "admin";
                                    try (PreparedStatement ps3 = con.prepareStatement("UPDATE usuarios SET rol = ? WHERE id = ?")) {
                                        ps3.setString(1, next);
                                        ps3.setInt(2, Integer.parseInt(id));
                                        ps3.executeUpdate();
                                    }
                                    // sincronizar is_admin si existe
                                    if (hasIsAdmin) {
                                        try (PreparedStatement ps4 = con.prepareStatement("UPDATE usuarios SET is_admin = ? WHERE id = ?")) {
                                            ps4.setInt(1, "admin".equalsIgnoreCase(next) ? 1 : 0);
                                            ps4.setInt(2, Integer.parseInt(id));
                                            ps4.executeUpdate();
                                        }
                                    }
                                }
                            }
                        }
                    }
                } catch (SQLException ignore) {}
            }
        } catch (SQLException e) {
            throw new ServletException(e);
        }

        response.sendRedirect(request.getContextPath() + "/admin/users");
    }
}
