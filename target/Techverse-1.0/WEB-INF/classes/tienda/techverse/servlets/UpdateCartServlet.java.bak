package tienda.supernova.servlets;

import tienda.supernova.models.CartItem;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import tienda.supernova.db.DBConnection;

@WebServlet("/update-cart")
public class UpdateCartServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        HttpSession session = request.getSession(false);
        if (session == null) {
            response.sendRedirect(request.getContextPath() + "/Cart.jsp");
            return;
        }

        Object cartObj = session.getAttribute("cart");
        if (!(cartObj instanceof List)) {
            response.sendRedirect(request.getContextPath() + "/Cart.jsp");
            return;
        }

        @SuppressWarnings("unchecked")
        List<CartItem> cart = (List<CartItem>) cartObj;

        String idParam = request.getParameter("product_id");
        String action = request.getParameter("action"); // expected: increase | decrease

        int productId = 0;
        try { if (idParam != null) productId = Integer.parseInt(idParam); } catch (NumberFormatException ignore) {}

        for (CartItem item : cart) {
            if (item.getProductId() == productId) {
                // consultar stock actual
                int currentStock = item.getStock();
                try (Connection c = DBConnection.getConnection()) {
                    PreparedStatement ps = c.prepareStatement("SELECT stock FROM productos WHERE id = ?");
                    ps.setInt(1, productId);
                    ResultSet rs = ps.executeQuery();
                    if (rs.next()) currentStock = rs.getInt("stock");
                } catch (SQLException e) {
                    e.printStackTrace();
                }

                if ("increase".equalsIgnoreCase(action)) {
                    int newQty = item.getQuantity() + 1;
                    if (currentStock > 0) newQty = Math.min(newQty, currentStock);
                    item.setQuantity(newQty);
                } else if ("decrease".equalsIgnoreCase(action)) {
                    int q = item.getQuantity() - 1;
                    if (q > 0) item.setQuantity(q);
                    else {
                        cart.remove(item);
                    }
                }

                item.setStock(currentStock);
                break;
            }
        }

        // Ensure cart attribute updated
        session.setAttribute("cart", cart);

        response.sendRedirect(request.getContextPath() + "/Cart.jsp");
    }
}
