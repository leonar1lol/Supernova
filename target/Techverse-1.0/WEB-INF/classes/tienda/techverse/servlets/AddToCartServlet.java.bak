package tienda.supernova.servlets;

import tienda.supernova.models.CartItem;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import tienda.supernova.db.DBConnection;

@WebServlet("/add-to-cart")
public class AddToCartServlet extends HttpServlet {

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        HttpSession session = request.getSession(true);

        String idParam = request.getParameter("product_id");
        String name = request.getParameter("product_name");
        String priceParam = request.getParameter("product_price");
        String image = request.getParameter("product_image");
        String qtyParam = request.getParameter("quantity");

        int productId = 0;
        int quantity = 1;
        double price = 0.0;
        try {
            if (idParam != null) productId = Integer.parseInt(idParam);
        } catch (NumberFormatException ignored) {}
        try {
            if (qtyParam != null) quantity = Math.max(1, Integer.parseInt(qtyParam));
        } catch (NumberFormatException ignored) {}
        try {
            if (priceParam != null) {
                // Accept price formats like "2159.85" or "S/ 2.159,85" - try to sanitize
                String cleaned = priceParam.replaceAll("[^0-9,\\.]", "").replace(',', '.');
                price = Double.parseDouble(cleaned);
            }
        } catch (NumberFormatException ignored) {}

        // Retrieve or create cart (safe cast)
        Object cartObj = session.getAttribute("cart");
        List<CartItem> cart;
        if (cartObj instanceof List) {
            @SuppressWarnings("unchecked")
            List<CartItem> temp = (List<CartItem>) cartObj;
            cart = temp;
        } else {
            cart = new ArrayList<>();
            session.setAttribute("cart", cart);
        }

        // Consultar stock actual desde la base de datos
        int currentStock = 0;
        if (productId != 0) {
            try (Connection c = DBConnection.getConnection()) {
                PreparedStatement ps = c.prepareStatement("SELECT stock FROM productos WHERE id = ?");
                ps.setInt(1, productId);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    currentStock = rs.getInt("stock");
                }
            } catch (SQLException e) {
                // si hay error al leer stock, lo registramos en consola y permitimos agregar con stock 0 (no agregado)
                e.printStackTrace();
            }
        }

        // If product already in cart, increase quantity but not beyond stock
        boolean found = false;
        for (CartItem item : cart) {
            if (item.getProductId() == productId && productId != 0) {
                int newQty = item.getQuantity() + quantity;
                if (currentStock > 0) newQty = Math.min(newQty, currentStock);
                item.setQuantity(newQty);
                item.setStock(currentStock);
                found = true;
                break;
            }
        }

        if (!found) {
            if (currentStock <= 0) {
                // No stock: no agregar, redirigir al producto o al carrito
                response.sendRedirect(request.getContextPath() + "/Cart.jsp?error=nostock");
                return;
            }
            int addQty = Math.min(quantity, currentStock);
            CartItem newItem = new CartItem(productId, name != null ? name : "Producto", price, image != null ? image : "", addQty, currentStock);
            cart.add(newItem);
        }

        // Redirect back to Cart page
        response.sendRedirect(request.getContextPath() + "/Cart.jsp");
    }
}
