package tienda.supernova.servlets;

import tienda.supernova.db.DBConnection;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.Part;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@WebServlet("/admin/products")
@MultipartConfig(fileSizeThreshold = 1024 * 1024, maxFileSize = 5 * 1024 * 1024)
public class AdminProductServlet extends HttpServlet {

    private String uploadPath;

    @Override
    public void init() throws ServletException {
        uploadPath = getServletContext().getRealPath("/admin/uploads");
        File uploadDir = new File(uploadPath);
        if (!uploadDir.exists()) uploadDir.mkdirs();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // Si viene ?edit=id, cargar producto para edici√≥n
        String editId = request.getParameter("edit");
        Map<String, Object> editProduct = null;
        String sqlList = "SELECT id, nombre, marca, modelo, categoria, precio, stock, ruta_imagen, activo, descripcion FROM productos";
        List<Map<String, Object>> products = new ArrayList<>();
        try (Connection con = DBConnection.getConnection()) {
            try (PreparedStatement ps = con.prepareStatement(sqlList); ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Map<String, Object> p = new HashMap<>();
                    p.put("id", rs.getInt("id"));
                    p.put("nombre", rs.getString("nombre"));
                    p.put("marca", rs.getString("marca"));
                    p.put("modelo", rs.getString("modelo"));
                    p.put("categoria", rs.getString("categoria"));
                    p.put("precio", rs.getBigDecimal("precio"));
                    p.put("stock", rs.getInt("stock"));
                    p.put("ruta_imagen", rs.getString("ruta_imagen"));
                    p.put("activo", rs.getBoolean("activo"));
                    p.put("descripcion", rs.getString("descripcion"));
                    products.add(p);
                }
            }

            if (editId != null && !editId.isEmpty()) {
                String sql = "SELECT id, nombre, marca, modelo, categoria, precio, stock, ruta_imagen, descripcion, activo FROM productos WHERE id = ?";
                try (PreparedStatement ps2 = con.prepareStatement(sql)) {
                    ps2.setInt(1, Integer.parseInt(editId));
                    try (ResultSet rs2 = ps2.executeQuery()) {
                        if (rs2.next()) {
                            editProduct = new HashMap<>();
                            editProduct.put("id", rs2.getInt("id"));
                            editProduct.put("nombre", rs2.getString("nombre"));
                            editProduct.put("marca", rs2.getString("marca"));
                            editProduct.put("modelo", rs2.getString("modelo"));
                            editProduct.put("categoria", rs2.getString("categoria"));
                            editProduct.put("precio", rs2.getBigDecimal("precio"));
                            editProduct.put("stock", rs2.getInt("stock"));
                            editProduct.put("ruta_imagen", rs2.getString("ruta_imagen"));
                            editProduct.put("descripcion", rs2.getString("descripcion"));
                            editProduct.put("activo", rs2.getBoolean("activo"));
                        }
                    }
                }
            }
        } catch (SQLException e) {
            throw new ServletException(e);
        }

        request.setAttribute("products", products);
        request.setAttribute("editProduct", editProduct);
        request.getRequestDispatcher("/admin/products.jsp").forward(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = request.getParameter("action");
        if (action == null) action = "create";

        try (Connection con = DBConnection.getConnection()) {
            if (action.equals("create") || action.equals("update")) {
                String nombre = request.getParameter("nombre");
                String marca = request.getParameter("marca");
                String modelo = request.getParameter("modelo");
                String categoria = request.getParameter("categoria");
                String precio = request.getParameter("precio");
                String stock = request.getParameter("stock");
                String descripcion = request.getParameter("descripcion");
                Part filePart = request.getPart("imagen");

                String imagePath = null;
                if (filePart != null && filePart.getSize() > 0) {
                    String submitted = filePart.getSubmittedFileName();
                    String filename = System.currentTimeMillis() + "_" + submitted.replaceAll("\\s+", "_");
                    File file = new File(uploadPath, filename);
                    try (InputStream in = filePart.getInputStream()) {
                        Files.copy(in, file.toPath(), StandardCopyOption.REPLACE_EXISTING);
                    }
                    imagePath = "admin/uploads/" + filename;
                }

                if (action.equals("create")) {
                    String sql = "INSERT INTO productos (slug, nombre, marca, modelo, categoria, precio, ruta_imagen, stock, descripcion, activo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 1)";
                    PreparedStatement ps = con.prepareStatement(sql);
                    ps.setString(1, (nombre != null ? nombre.toLowerCase().replaceAll("\\s+", "-") : "producto"));
                    ps.setString(2, nombre);
                    ps.setString(3, marca);
                    ps.setString(4, modelo);
                    ps.setString(5, categoria);
                    ps.setString(6, precio);
                    ps.setString(7, imagePath);
                    ps.setString(8, stock);
                    ps.setString(9, descripcion);
                    ps.executeUpdate();
                } else {
                    String id = request.getParameter("id");
                    StringBuilder sb = new StringBuilder("UPDATE productos SET nombre = ?, marca = ?, modelo = ?, categoria = ?, precio = ?, stock = ?, descripcion = ?");
                    if (imagePath != null) sb.append(", ruta_imagen = ?");
                    sb.append(" WHERE id = ?");
                    PreparedStatement ps = con.prepareStatement(sb.toString());
                    int idx = 1;
                    ps.setString(idx++, nombre);
                    ps.setString(idx++, marca);
                    ps.setString(idx++, modelo);
                    ps.setString(idx++, categoria);
                    ps.setString(idx++, precio);
                    ps.setString(idx++, stock);
                    ps.setString(idx++, descripcion);
                    if (imagePath != null) ps.setString(idx++, imagePath);
                    ps.setInt(idx++, Integer.parseInt(id));
                    ps.executeUpdate();
                }
            } else if (action.equals("delete")) {
                String id = request.getParameter("id");
                String sql = "DELETE FROM productos WHERE id = ?";
                PreparedStatement ps = con.prepareStatement(sql);
                ps.setInt(1, Integer.parseInt(id));
                ps.executeUpdate();
            } else if (action.equals("toggle")) {
                String id = request.getParameter("id");
                String sql = "UPDATE productos SET activo = NOT activo WHERE id = ?";
                PreparedStatement ps = con.prepareStatement(sql);
                ps.setInt(1, Integer.parseInt(id));
                ps.executeUpdate();
            }
        } catch (SQLException e) {
            throw new ServletException(e);
        }

        response.sendRedirect(request.getContextPath() + "/admin/products");
    }
}
